# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15Pc0qII7Q8QN-3qPIv4X9TwiPyBya2e3
"""

# !pip -q install google-genai

# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

# Instalar Framework ADK de agentes do Google ################################################
#!pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conte√∫dos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a sa√≠da de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisi√ß√µes HTTP
import warnings

warnings.filterwarnings("ignore")

# Fun√ß√£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um servi√ßo de sess√£o em mem√≥ria
    session_service = InMemorySessionService()
    # Cria uma nova sess√£o (voc√™ pode personalizar os IDs conforme necess√°rio)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conte√∫do da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execu√ß√£o do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Fun√ß√£o auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

#!pip install google-generativeai

#!pip install streamlit
#!npm install localtunnel
import streamlit as st

##########################################
# --- Agente 1: Buscador de Receitas --- #
##########################################
def agente_buscador_receitas(ingrediente):
    buscador = Agent(
        name="agente_buscador_receitas",
        model="gemini-2.0-flash",
        description="Buscar receitas no google com base nos ingredientes fornecidos pelo usu√°rio.",
        tools=[google_search],
        instruction="""Voc√™ √© um agente especializado em encontrar receitas deliciosas na internet.
        Sua tarefa √© usar a ferramenta do google (google_search) para buscar receitas relevantes
        com base no ingrediente principal fornecido pelo usu√°rio.
        Tente encontrar pelo menos 3 receitas que pare√ßam interessantes e forne√ßa informa√ß√µes
        como o t√≠tulo da receita e um breve resumo ou os ingredientes principais, se dispon√≠veis no resultado da busca.
        Mantenha o foco em receitas pr√°ticas e acess√≠veis."""
    )
    entrada_do_agente_buscador = f"Ingrediente principal: {ingrediente}"
    # Executa o agente
    receitas_encontradas = call_agent(buscador, entrada_do_agente_buscador)
    return receitas_encontradas

##################################################
# --- Agente 2: Buscador de Imagens de Receitas --- #
##################################################
def agente_buscador_imagens(nome_da_receita):
    buscador_imagens = Agent(
        name="agente_buscador_imagens",
        model="gemini-2.0-flash",
        description="Buscar imagens correspondentes a uma receita espec√≠fica no google.",
        tools=[google_search],
        instruction="""Voc√™ √© um especialista em encontrar imagens online.
        Sua tarefa √© usar a ferramenta do google (google_search) para buscar uma imagem que represente bem a receita fornecida.
        A imagem deve ser visualmente atraente e relevante para o nome da receita.
        Retorne apenas a URL da imagem encontrada."""
    )
    entrada_do_agente_buscador_imagens = f"Nome da receita: {nome_da_receita}"
    # Executa o agente
    url_da_imagem = call_agent(buscador_imagens, entrada_do_agente_buscador_imagens)
    return url_da_imagem

######################################################
# --- Agente 3: Criador de Post de Receita para Site --- #
######################################################
def agente_criador_post(receitas_encontradas, url_imagem):
    criador_post = Agent(
        name="agente_criador_post",
        model="gemini-2.0-flash",
        description="Juntar informa√ß√µes de receitas e imagens para criar um post para site.",
        instruction="""Voc√™ √© um criador de conte√∫do para um site de receitas.
        Com base nas informa√ß√µes das receitas encontradas e na URL da imagem, sua tarefa √© criar um post bem estruturado.
        Para cada receita, inclua o t√≠tulo, os ingredientes (se dispon√≠veis no resumo da busca),
        um breve modo de preparo (se dispon√≠veis no resumo), dicas adicionais para o leitor e a URL da imagem correspondente.
        Organize o post de forma clara e convidativa para os leitores do site."""
    )
    entrada_do_agente_criador_post = f"Informa√ß√µes das receitas: {receitas_encontradas}\nURL da imagem: {url_imagem}"
    # Executa o agente
    post_para_site = call_agent(criador_post, entrada_do_agente_criador_post)
    return post_para_site

st.title("üç≥ Gerador de Posts de Receitas")

ingrediente_principal = st.text_input("Digite o ingrediente principal para buscar receitas:")

if ingrediente_principal:
    st.info(f"Buscando receitas com: {ingrediente_principal}")

    receitas_buscadas = agente_buscador_receitas(ingrediente_principal)
    st.subheader("Resultado do Agente 1 (Buscador de Receitas)")
    st.markdown(receitas_buscadas)
    st.write("---")

    if receitas_buscadas and isinstance(receitas_buscadas, str):
        # Tenta extrair o t√≠tulo da primeira receita para buscar uma imagem
        primeira_receita = receitas_buscadas.split('\n')[0].replace("T√≠tulo: ", "").strip() if "T√≠tulo:" in receitas_buscadas.split('\n')[0] else ingrediente_principal
        url_imagem = agente_buscador_imagens(primeira_receita)
        st.subheader("Resultado do Agente 2 (Buscador de Imagens)")
        st.write(f"URL da imagem encontrada: {url_imagem}")
        st.write("---")

        post_final = agente_criador_post(receitas_buscadas, url_imagem)
        st.subheader("Resultado do Agente 3 (Criador de Post)")
        st.markdown(post_final)
    else:
        st.warning("Nenhuma receita foi encontrada. N√£o foi poss√≠vel buscar uma imagem ou criar o post.")
        !streamlit run /content/app_receitas.py & npx localtunnel --port 8501 &
